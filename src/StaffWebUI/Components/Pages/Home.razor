@page "/"
@rendermode @(new InteractiveServerRenderMode(false))
@using eShopSupport.ServiceDefaults.Clients.Backend
@inject BackendClient Backend

<Title>Tickets</Title>

<div>
    <FluentDataGrid Loading="true" ItemKey="@(t => t.TicketId)" ItemSize="32" ItemsProvider="@dataLoader" Virtualize="true" GridTemplateColumns="100px auto 110px" GenerateHeader="GenerateHeaderOption.Sticky">
        <ChildContent>
            <PropertyColumn Title="#" Property="@(t => t.TicketId)" Sortable="true" Align="Align.Center" />
            <PropertyColumn Title="Customer" Property="@(t => t.CustomerFullName)" Sortable="true" />
            <PropertyColumn Title="Messages" Property="@(t => t.NumMessages)" Sortable="true" Align="Align.Center" />
        </ChildContent>
        <LoadingContent></LoadingContent>
    </FluentDataGrid>
</div>

@code {
    IQueryable<ListTicketsResultItem>? tickets;
    private GridItemsProvider<ListTicketsResultItem> dataLoader;

    public Home()
    {
        dataLoader = LoadDataAsync;
    }

    private async ValueTask<GridItemsProviderResult<ListTicketsResultItem>> LoadDataAsync(GridItemsProviderRequest<ListTicketsResultItem> request)
    {
        var sortColumn = request.GetSortByProperties().FirstOrDefault();
        var result = await Backend.ListTicketsAsync(request.StartIndex, request.Count ?? 50, sortColumn.PropertyName, sortColumn.Direction == SortDirection.Ascending);
        return new() { Items = result.Items, TotalItemCount = result.TotalCount };
    }
}
